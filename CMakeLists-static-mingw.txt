#
# Takin
# @author tweber
# @date 2013-2016
# @license GPLv2
#

project(takin)
cmake_minimum_required(VERSION 3.0)

#set(CMAKE_VERBOSE_MAKEFILE TRUE)
set(CMAKE_BUILD_TYPE Release)


list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}" "." "${PROJECT_SOURCE_DIR}/tlibs")
set(CMAKE_BINARY_DIR "${CMAKE_SOURCE_DIR}")
set(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin")

find_package(Boost REQUIRED COMPONENTS iostreams system filesystem regex REQUIRED)
find_package(Threads REQUIRED)
find_package(Qt4 REQUIRED)
find_package(PNG REQUIRED)
find_package(Qwt REQUIRED)

message("Install path prefix: ${CMAKE_INSTALL_PREFIX}")
message("Using qwt version ${QWT_MAJOR_VERSION}")
message("Qt moc: ${QT_MOC_EXECUTABLE}\nQt uic: ${QT_UIC_EXECUTABLE}")

add_definitions(-DNDEBUG -DIS_EXPERIMENTAL_BUILD)
add_definitions(-DUSE_NET -DUSE_IOSTR -DUSE_BOOST_REX -DUSE_PY -DUSE_GIL)
add_definitions(-DQT_VER=4 -DQWT_VER=${QWT_MAJOR_VERSION})
add_definitions(-DNO_LAPACK -DNO_3D -DNO_CLP)
add_definitions(-DNO_JPEG -DNO_TIFF)
add_definitions(-DNO_PY)
add_definitions(-DINSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}")
add_definitions(${Boost_CXX_FLAGS})
add_definitions(-DTLIBS_INC_HDR_IMPLS)


include_directories("${PROJECT_SOURCE_DIR}" ".")
include_directories("${Boost_INCLUDE_DIRS}/..")
include_directories("${PNG_INCLUDE_DIRS}")
include_directories("${QWT_INCLUDE_DIRS}")


set(CMAKE_AUTOMOC OFF)
set(CMAKE_AUTOUIC OFF)

add_definitions(-std=c++11)
add_definitions(-O3 -s)
add_definitions(-mtune=native -ffast-math)
#add_definitions(-march=native)



# -----------------------------------------------------------------------------
# takin
# -----------------------------------------------------------------------------
add_executable(takin 
	tools/taz/taz_main.cpp
	tools/taz/taz.cpp tools/taz/tas_layout.cpp tools/taz/tof_layout.cpp
	tools/taz/taz_crys.cpp
	tools/taz/taz_file.cpp tools/taz/taz_export.cpp
	tools/taz/tas_layout.cpp tools/taz/scattering_triangle.cpp
	tools/taz/real_lattice.cpp tools/taz/proj_lattice.cpp
	tools/taz/nicos.cpp tools/taz/sics.cpp tools/taz/taz_net.cpp

	tools/res/cn.cpp tools/res/pop.cpp tools/res/eck.cpp tools/res/viol.cpp
	tools/res/ResoDlg.cpp

	tools/monteconvo/ConvoDlg.cpp tools/monteconvo/SqwParamDlg.cpp tools/monteconvo/TASReso.cpp
	tools/monteconvo/sqw.cpp tools/monteconvo/sqwbase.cpp tools/monteconvo/sqwfactory.cpp

	tools/convofit/scan.cpp
	tools/scanviewer/scanviewer.cpp

	dialogs/SettingsDlg.cpp dialogs/FilePreviewDlg.cpp
	dialogs/GotoDlg.cpp dialogs/DWDlg.cpp dialogs/DynPlaneDlg.cpp
	dialogs/NeutronDlg.cpp dialogs/SpurionDlg.cpp dialogs/PowderDlg.cpp
	dialogs/DispDlg.cpp
	dialogs/RecipParamDlg.cpp dialogs/RealParamDlg.cpp
	dialogs/SrvDlg.cpp dialogs/NetCacheDlg.cpp
	dialogs/EllipseDlg.cpp dialogs/FormfactorDlg.cpp
	dialogs/AtomsDlg.cpp dialogs/AboutDlg.cpp

	libs/spacegroups/spacegroup.cpp tools/sglist/SgListDlg.cpp
	libs/globals.cpp libs/globals_qt.cpp libs/spacegroups/crystalsys.cpp
	libs/formfactors/formfact.cpp libs/qthelper.cpp
#	libs/plotgl.cpp tools/taz/recip3d.cpp dialogs/EllipseDlg3D.cpp


	# statically link tlibs externals
	#tlibs/file/loadinstr.cpp  
	tlibs/file/recent.cpp  tlibs/file/x3d.cpp
	tlibs/log/log.cpp tlibs/log/debug.cpp
	tlibs/math/rand.cpp
	tlibs/string/spec_char.cpp
	tlibs/helper/flags.cpp  tlibs/version.cpp
)

target_link_libraries(takin 
	${Boost_LIBRARIES} ws2_32 Threads::Threads
	Qt4::QtCore Qt4::QtGui Qt4::QtSvg #Qt4::QtOpenGL
	${PYTHON_LIBRARIES}
	${PNG_LIBRARIES}
	${QWT_LIBRARIES}
)


# pre-build
add_custom_target(prebuild-script
	COMMAND ${PROJECT_SOURCE_DIR}/prebuild.sh ${QT_UIC_EXECUTABLE} ${QT_MOC_EXECUTABLE} ${PROJECT_SOURCE_DIR}
)


# post-build
#add_custom_command(TARGET takin POST_BUILD
#	COMMAND qcollectiongenerator ${PROJECT_SOURCE_DIR}/doc/takin.qhcp -o ${PROJECT_SOURCE_DIR}/doc/takin.qhc
#		&& cp -v ${PROJECT_SOURCE_DIR}/doc/takin.qhc ${PROJECT_SOURCE_DIR}/res/
#		&& cp -v ${PROJECT_SOURCE_DIR}/doc/takin.qch ${PROJECT_SOURCE_DIR}/res/
#	MAIN_DEPENDENCY takin)

if(CMAKE_BUILD_TYPE STREQUAL "Release")
	add_custom_command(TARGET takin POST_BUILD
		COMMAND strip -v $<TARGET_FILE:takin>
		MAIN_DEPENDENCY takin
	)
endif()


add_dependencies(takin prebuild-script)
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
# install
# -----------------------------------------------------------------------------
install(TARGETS takin DESTINATION takin)
install(DIRECTORY ${PROJECT_SOURCE_DIR}/res ${PROJECT_SOURCE_DIR}/examples ${PROJECT_SOURCE_DIR}/doc
    DESTINATION share/takin)
install(FILES ${PROJECT_SOURCE_DIR}/COPYING ${PROJECT_SOURCE_DIR}/AUTHORS ${PROJECT_SOURCE_DIR}/LICENSES
	DESTINATION takin)
# -----------------------------------------------------------------------------
